#!/usr/bin/env ruby
# frozen_string_literal: true

require 'find'
require 'optparse'
require 'set'

# Runs the specified command and restarts it when files in the specified directories change.
class Watcher
  MIN_REFRESH_DELAY = 2

  def initialize(command:, dirs: [], files: [])
    raise 'missing dirs or files' unless dirs&.any? || files&.any?
    raise 'missing command' unless command&.any?

    @dirs = dirs || []
    @files = files || []
    @command = command
    @watched_files = watched_files
    @alive = true
    @last_change = Time.now
  end

  def watch
    @pid = Process.spawn(*@command) if @alive
    while @alive
      minutes_since_last_change = ((Time.now - @last_change) / 60).to_i
      minutes_since_last_change = [minutes_since_last_change, 0].max
      delay = [60, 20, 10, 5, 0].find { |t| minutes_since_last_change >= t }
      delay = [delay, MIN_REFRESH_DELAY].max
      sleep delay
      refresh
    end
  end

  def refresh
    files = updated_files
    return if files.empty?

    puts "changed: #{files.join(' ')}"
    @last_change = Time.now
    Process.kill('TERM', @pid) if @pid
    @pid = nil
    @pid = Process.spawn(*@command) if @alive
  end

  def die(signal)
    if @pid
      Process.kill(signal, @pid)
      @pid = nil
    end
    @alive = false
  end

  def watched_files
    files = Find.find(*@dirs).to_a + @files
    entries = files.flat_map do |file|
      if FileTest.file?(file)
        [[file, File.mtime(file).to_i]]
      else
        []
      end
    end
    entries.to_set
  end

  def updated_files
    new_watched_files = watched_files
    difference = new_watched_files - @watched_files
    @watched_files = new_watched_files
    difference.map(&:first)
  end
end

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: ./script/rerun [options] -- command [args...]"

  opts.on("-d", "--dir <dir>", "A directory to watch") do |dir|
    options[:dirs] ||= []
    options[:dirs] << dir
  end

  opts.on("-f", "--file <file>", "A file to watch.") do |file|
    options[:files] ||= []
    options[:files] << file
  end
end.parse!

watcher = Watcher.new(dirs: options[:dirs], files: options[:files], command: ARGV)

Signal.trap('INT') do
  watcher.die('INT')
  exit 2
end

Signal.trap('TERM') do
  watcher.die('TERM')
  exit 15
end
watcher.watch
